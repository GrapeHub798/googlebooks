{"ast":null,"code":"import { ADD_FAVORITE, DELETE_FAVORITE, DELETE_FAVORITE_BOOK, SET_FAVORITES, UPDATE_BOOKS, UPDATE_PAGE } from '../constants/action-types';\nimport BookCollection from \"../../model/bookcollection.model\";\nconst initialState = {\n  books_home: BookCollection,\n  books_favorite: BookCollection,\n  list: []\n};\n\nconst rootReducer = (state = initialState, action) => {\n  if (action.type === UPDATE_BOOKS) {\n    const collectionToUpdate = action.payload.collectionName;\n    const collectionState = new BookCollection();\n    Object.assign(collectionState, {\n      books: action.payload.books,\n      resultsPerPage: action.payload.resultsPerPage,\n      pageCount: action.payload.pageCount,\n      currentPage: action.payload.currentPage,\n      bookSearch: action.payload.bookSearch\n    });\n    return { ...state,\n      [collectionToUpdate]: collectionState\n    };\n  }\n\n  if (action.type === UPDATE_PAGE) {\n    const collectionToUpdate = action.payload.collectionName;\n    let collectionState = state[collectionToUpdate];\n    Object.assign(collectionState, {\n      currentPage: action.payload.currentPage\n    });\n    return { ...state,\n      collectionState\n    };\n  }\n\n  if (action.type === ADD_FAVORITE) {\n    return { ...state,\n      list: [...state.list, action.payload.favorite]\n    };\n  }\n\n  if (action.type === DELETE_FAVORITE_BOOK) {\n    //used a specific name here, because it's one call, would use a generic for multiple lists\n    return { ...state,\n      books_favorite: { ...state.books_favorite,\n        books: state.books_favorite.books.filter(x => x.id !== action.payload.id)\n      }\n    };\n  }\n\n  if (action.type === DELETE_FAVORITE) {\n    return { ...state,\n      list: state.list.filter(x => x !== action.payload.favorite)\n    };\n  }\n\n  if (action.type === SET_FAVORITES) {\n    return { ...state,\n      list: [...state.list, ...action.payload.favorites]\n    };\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/Code/googlebooks/client/src/redux/reducers/index.jsx"],"names":["ADD_FAVORITE","DELETE_FAVORITE","DELETE_FAVORITE_BOOK","SET_FAVORITES","UPDATE_BOOKS","UPDATE_PAGE","BookCollection","initialState","books_home","books_favorite","list","rootReducer","state","action","type","collectionToUpdate","payload","collectionName","collectionState","Object","assign","books","resultsPerPage","pageCount","currentPage","bookSearch","favorite","filter","x","id","favorites"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,eAAtB,EAAuCC,oBAAvC,EAA6DC,aAA7D,EAA4EC,YAA5E,EAA0FC,WAA1F,QAA4G,2BAA5G;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,UAAU,EAAEF,cADQ;AAEpBG,EAAAA,cAAc,EAAEH,cAFI;AAGpBI,EAAAA,IAAI,EAAE;AAHc,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,MAAIA,MAAM,CAACC,IAAP,KAAgBV,YAApB,EAAkC;AACjC,UAAMW,kBAAkB,GAAGF,MAAM,CAACG,OAAP,CAAeC,cAA1C;AACA,UAAMC,eAAe,GAAG,IAAIZ,cAAJ,EAAxB;AACAa,IAAAA,MAAM,CAACC,MAAP,CAAcF,eAAd,EAA8B;AAC7BG,MAAAA,KAAK,EAAER,MAAM,CAACG,OAAP,CAAeK,KADO;AAE7BC,MAAAA,cAAc,EAAET,MAAM,CAACG,OAAP,CAAeM,cAFF;AAG7BC,MAAAA,SAAS,EAAEV,MAAM,CAACG,OAAP,CAAeO,SAHG;AAI7BC,MAAAA,WAAW,EAAEX,MAAM,CAACG,OAAP,CAAeQ,WAJC;AAK7BC,MAAAA,UAAU,EAAEZ,MAAM,CAACG,OAAP,CAAeS;AALE,KAA9B;AAOA,WAAO,EAAC,GAAGb,KAAJ;AAAW,OAACG,kBAAD,GAAsBG;AAAjC,KAAP;AACA;;AAED,MAAIL,MAAM,CAACC,IAAP,KAAgBT,WAApB,EAAiC;AAChC,UAAMU,kBAAkB,GAAGF,MAAM,CAACG,OAAP,CAAeC,cAA1C;AACA,QAAIC,eAAe,GAAGN,KAAK,CAACG,kBAAD,CAA3B;AACAI,IAAAA,MAAM,CAACC,MAAP,CAAcF,eAAd,EAA+B;AAC9BM,MAAAA,WAAW,EAAEX,MAAM,CAACG,OAAP,CAAeQ;AADE,KAA/B;AAGA,WAAO,EAAC,GAAGZ,KAAJ;AAAWM,MAAAA;AAAX,KAAP;AACA;;AAED,MAAIL,MAAM,CAACC,IAAP,KAAgBd,YAApB,EAAkC;AACjC,WAAO,EAAC,GAAGY,KAAJ;AAAWF,MAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBG,MAAM,CAACG,OAAP,CAAeU,QAA/B;AAAjB,KAAP;AACA;;AAED,MAAIb,MAAM,CAACC,IAAP,KAAgBZ,oBAApB,EAAyC;AACxC;AACA,WAAO,EACN,GAAGU,KADG;AAENH,MAAAA,cAAc,EAAE,EACf,GAAGG,KAAK,CAACH,cADM;AAEfY,QAAAA,KAAK,EAAET,KAAK,CAACH,cAAN,CAAqBY,KAArB,CAA2BM,MAA3B,CAAkCC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAAShB,MAAM,CAACG,OAAP,CAAea,EAA/D;AAFQ;AAFV,KAAP;AAOA;;AAED,MAAIhB,MAAM,CAACC,IAAP,KAAgBb,eAApB,EAAqC;AACpC,WAAO,EAAC,GAAGW,KAAJ;AAAWF,MAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWiB,MAAX,CAAkBC,CAAC,IAAIA,CAAC,KAAKf,MAAM,CAACG,OAAP,CAAeU,QAA5C;AAAjB,KAAP;AACA;;AAED,MAAIb,MAAM,CAACC,IAAP,KAAgBX,aAApB,EAAmC;AAClC,WAAO,EAAC,GAAGS,KAAJ;AAAWF,MAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAe,GAAGG,MAAM,CAACG,OAAP,CAAec,SAAjC;AAAjB,KAAP;AACA;;AACD,SAAOlB,KAAP;AACA,CA9CD;;AAgDA,eAAeD,WAAf","sourcesContent":["import {ADD_FAVORITE, DELETE_FAVORITE, DELETE_FAVORITE_BOOK, SET_FAVORITES, UPDATE_BOOKS, UPDATE_PAGE} from '../constants/action-types';\nimport BookCollection from \"../../model/bookcollection.model\";\n\nconst initialState = {\n\tbooks_home: BookCollection,\n\tbooks_favorite: BookCollection,\n\tlist: [],\n};\n\nconst rootReducer = (state = initialState, action) => {\n\tif (action.type === UPDATE_BOOKS) {\n\t\tconst collectionToUpdate = action.payload.collectionName;\n\t\tconst collectionState = new BookCollection();\n\t\tObject.assign(collectionState,{\n\t\t\tbooks: action.payload.books,\n\t\t\tresultsPerPage: action.payload.resultsPerPage,\n\t\t\tpageCount: action.payload.pageCount,\n\t\t\tcurrentPage: action.payload.currentPage,\n\t\t\tbookSearch: action.payload.bookSearch\n\t\t})\n\t\treturn {...state, [collectionToUpdate]: collectionState};\n\t}\n\n\tif (action.type === UPDATE_PAGE) {\n\t\tconst collectionToUpdate = action.payload.collectionName;\n\t\tlet collectionState = state[collectionToUpdate];\n\t\tObject.assign(collectionState, {\n\t\t\tcurrentPage: action.payload.currentPage,\n\t\t});\n\t\treturn {...state, collectionState};\n\t}\n\n\tif (action.type === ADD_FAVORITE) {\n\t\treturn {...state, list: [...state.list, action.payload.favorite]};\n\t}\n\t\n\tif (action.type === DELETE_FAVORITE_BOOK){\n\t\t//used a specific name here, because it's one call, would use a generic for multiple lists\n\t\treturn {\n\t\t\t...state,\n\t\t\tbooks_favorite: {\n\t\t\t\t...state.books_favorite,\n\t\t\t\tbooks: state.books_favorite.books.filter(x => x.id !== action.payload.id)\n\t\t\t}\n\t\t};\n\t}\n\n\tif (action.type === DELETE_FAVORITE) {\n\t\treturn {...state, list: state.list.filter(x => x !== action.payload.favorite)};\n\t}\n\n\tif (action.type === SET_FAVORITES) {\n\t\treturn {...state, list: [...state.list,...action.payload.favorites]};\n\t}\n\treturn state;\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}