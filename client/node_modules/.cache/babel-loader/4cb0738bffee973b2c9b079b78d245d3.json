{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\googlebooks\\\\client\\\\src\\\\pages\\\\favorite\\\\favorites.jsx\";\nimport React, { Component } from 'react';\nimport { updateBooks } from \"../../redux/actions\";\nimport { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport AppList from '../../components/list/list';\nimport FavoriteApi from \"../../api/favorite.api\";\nimport favoriteService from \"../../services/favorite.service\";\n\nconst mapStateToProps = state => {\n  const storeProps = {};\n\n  for (const [key, value] of Object.entries(state)) {\n    storeProps[key] = value;\n  }\n\n  return {\n    storeProps\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateBooks: bookUpdate => new Promise((resolve, reject) => {\n    dispatch(updateBooks(bookUpdate));\n    resolve();\n  })\n});\n\nclass AppFavorites extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      fetchingBooks: false,\n      errorMessage: '',\n      hasBooks: false,\n      defaultCollection: 'books_favorite' //resultsPerPage: 10, --unsure of this\n      //currentPage: 1 --unsure of this....\n\n    };\n    this.favoriteApi = new FavoriteApi();\n  }\n\n  componentDidMount() {\n    //get our favorites\n    this.subscription = favoriteService.updateFavorites().subscribe(favoriteId => {//this.doSearch(pageNumber);\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  getFavorites() {\n    this.favoriteApi.getFavorites().then(favorites => {\n      if (!favorites && !favorites.data) {\n        return;\n      }\n\n      const total = favorites.data.length;\n      const rawData = favorites.data;\n    });\n  }\n\n  render() {\n    const error = this.state.error;\n    const fetchingBooks = this.state.fetchingBooks;\n    const hasBooks = this.state.hasBooks;\n    const errorMessage = this.state.errorMessage;\n    const bookCollection = this.state.defaultCollection;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 4\n      }\n    }, hasBooks ? /*#__PURE__*/React.createElement(AppList, {\n      collectionToUse: bookCollection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }) : fetchingBooks ? /*#__PURE__*/React.createElement(Col, {\n      className: \"text-center fetching-books\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 6\n      }\n    }, \"Loading Favorites....\") : error ? /*#__PURE__*/React.createElement(Col, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }\n    }, errorMessage) : /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 66\n      }\n    })));\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppFavorites);","map":{"version":3,"sources":["D:/Code/googlebooks/client/src/pages/favorite/favorites.jsx"],"names":["React","Component","updateBooks","Row","Col","connect","AppList","FavoriteApi","favoriteService","mapStateToProps","state","storeProps","key","value","Object","entries","mapDispatchToProps","dispatch","bookUpdate","Promise","resolve","reject","AppFavorites","constructor","props","error","fetchingBooks","errorMessage","hasBooks","defaultCollection","favoriteApi","componentDidMount","subscription","updateFavorites","subscribe","favoriteId","componentWillUnmount","unsubscribe","getFavorites","then","favorites","data","total","length","rawData","render","bookCollection"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,iBAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAClC,QAAMC,UAAU,GAAG,EAAnB;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,KAAf,CAA3B,EAAiD;AAChDC,IAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBC,KAAlB;AACA;;AACD,SAAO;AACNF,IAAAA;AADM,GAAP;AAGA,CARD;;AAUA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACzCf,EAAAA,WAAW,EAAGgB,UAAD,IAAgB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7DJ,IAAAA,QAAQ,CAACf,WAAW,CAACgB,UAAD,CAAZ,CAAR;AACAE,IAAAA,OAAO;AACP,GAH4B;AADY,CAAf,CAA3B;;AAOA,MAAME,YAAN,SAA2BrB,SAA3B,CAAqC;AAWpCsB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AADkB,SAVnBd,KAUmB,GAVX;AACPe,MAAAA,KAAK,EAAE,KADA;AAEPC,MAAAA,aAAa,EAAE,KAFR;AAGPC,MAAAA,YAAY,EAAE,EAHP;AAIPC,MAAAA,QAAQ,EAAE,KAJH;AAKPC,MAAAA,iBAAiB,EAAE,gBALZ,CAMP;AACA;;AAPO,KAUW;AAElB,SAAKC,WAAL,GAAmB,IAAIvB,WAAJ,EAAnB;AACA;;AAEDwB,EAAAA,iBAAiB,GAAG;AACnB;AACA,SAAKC,YAAL,GAAoBxB,eAAe,CAACyB,eAAhB,GAAkCC,SAAlC,CAA4CC,UAAU,IAAI,CAC7E;AACA,KAFmB,CAApB;AAGA;;AAEDC,EAAAA,oBAAoB,GAAG;AACtB,SAAKJ,YAAL,CAAkBK,WAAlB;AACA;;AAEDC,EAAAA,YAAY,GAAG;AACd,SAAKR,WAAL,CAAiBQ,YAAjB,GACEC,IADF,CACQC,SAAD,IAAe;AACpB,UAAI,CAACA,SAAD,IAAc,CAACA,SAAS,CAACC,IAA7B,EAAkC;AACjC;AACA;;AACD,YAAMC,KAAK,GAAGF,SAAS,CAACC,IAAV,CAAeE,MAA7B;AACA,YAAMC,OAAO,GAAGJ,SAAS,CAACC,IAA1B;AAGA,KATF;AAUA;;AAEDI,EAAAA,MAAM,GAAG;AACR,UAAMpB,KAAK,GAAG,KAAKf,KAAL,CAAWe,KAAzB;AACA,UAAMC,aAAa,GAAG,KAAKhB,KAAL,CAAWgB,aAAjC;AACA,UAAME,QAAQ,GAAG,KAAKlB,KAAL,CAAWkB,QAA5B;AACA,UAAMD,YAAY,GAAG,KAAKjB,KAAL,CAAWiB,YAAhC;AACA,UAAMmB,cAAc,GAAG,KAAKpC,KAAL,CAAWmB,iBAAlC;AACA,wBAAQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACP,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACED,QAAQ,gBAAG,oBAAC,OAAD;AAAS,MAAA,eAAe,EAAIkB,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAmDpB,aAAa,gBACxE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADwE,GAExED,KAAK,gBAAG,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BE,YAA9B,CAAH,gBAAuD,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH9D,CADO,CAAR;AAOA;;AArDmC;;AAuDrC,eAAetB,OAAO,CAACI,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CM,YAA7C,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {updateBooks} from \"../../redux/actions\";\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport AppList from '../../components/list/list';\r\nimport FavoriteApi from \"../../api/favorite.api\";\r\nimport favoriteService from \"../../services/favorite.service\";\r\n\r\nconst mapStateToProps = (state) => {\r\n\tconst storeProps = {};\r\n\tfor (const [key, value] of Object.entries(state)){\r\n\t\tstoreProps[key] = value;\r\n\t}\r\n\treturn {\r\n\t\tstoreProps\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tupdateBooks: (bookUpdate) => new Promise((resolve, reject) => {\r\n\t\tdispatch(updateBooks(bookUpdate));\r\n\t\tresolve();\r\n\t})\r\n});\r\n\r\nclass AppFavorites extends Component {\r\n\tstate = {\r\n\t\terror: false,\r\n\t\tfetchingBooks: false,\r\n\t\terrorMessage: '',\r\n\t\thasBooks: false,\r\n\t\tdefaultCollection: 'books_favorite',\r\n\t\t//resultsPerPage: 10, --unsure of this\r\n\t\t//currentPage: 1 --unsure of this....\r\n\t};\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.favoriteApi = new FavoriteApi();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t//get our favorites\r\n\t\tthis.subscription = favoriteService.updateFavorites().subscribe(favoriteId => {\r\n\t\t\t//this.doSearch(pageNumber);\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.subscription.unsubscribe();\r\n\t}\r\n\r\n\tgetFavorites() {\r\n\t\tthis.favoriteApi.getFavorites()\r\n\t\t\t.then((favorites) => {\r\n\t\t\t\tif (!favorites && !favorites.data){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst total = favorites.data.length;\r\n\t\t\t\tconst rawData = favorites.data;\r\n\r\n\r\n\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst error = this.state.error;\r\n\t\tconst fetchingBooks = this.state.fetchingBooks;\r\n\t\tconst hasBooks = this.state.hasBooks;\r\n\t\tconst errorMessage = this.state.errorMessage;\r\n\t\tconst bookCollection = this.state.defaultCollection;\r\n\t\treturn (<React.Fragment>\r\n\t\t\t<Row>\r\n\t\t\t\t{hasBooks ? <AppList collectionToUse = {bookCollection}/> : fetchingBooks ?\r\n\t\t\t\t\t<Col className=\"text-center fetching-books\">Loading Favorites....</Col> :\r\n\t\t\t\t\terror ? <Col className=\"text-center\">{errorMessage}</Col> : <Col/>}\r\n\t\t\t</Row>\r\n\t\t</React.Fragment>);\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppFavorites);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}